@{
    ViewData["Title"] = "Profile Page";
    int? userId = Context.Session.GetInt32("UserId");
}

@model List<Wave.Models.Post>

<link rel="stylesheet" href="~/css/style.css">
<link rel="stylesheet" href="~/css/test.css">

<main>
    <div class="main__profile">
        <div id="profilePic">
            <!--Foto de perfil del usuario con el id asignado a la session-->
            @if (userId == null)
            {
                <img src="https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png" alt="">
            }
            else
            {
                var usuario = Model.FirstOrDefault(u => u.User.UserId == userId);

                if (usuario != null && usuario.User.ProfilePicture != null)
                {
                    <img src="data:image/jpeg;base64, @Convert.ToBase64String(usuario.User.ProfilePicture)" alt="Imagen" />
                }
                else
                {
                    <img src="https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png" alt="">
                }
            }
        </div>
        <br>
        <div class="spaceName">
            <!--Nombre del usuario con el id asignado a la session-->
            <h3>
                @if (userId == null)
                {
                    @Html.Display("Nada de esto importa")
                }
                else
                {
                    var usuario = Model.FirstOrDefault(u => u.User.UserId == userId);

                    if (usuario != null)
                    {
                        @usuario.User.UserName
                    }
                }
            </h3>
        </div>
        <br>
        <div class="btnZone">
            <div class="btnEdit">
                <a id="add-post-btn">
                    <span class="material-icons-sharp">
                        queue
                    </span>
                </a>
                <h3>Add post</h3>
            </div>
        </div>
        <br>
        <div id="postZone">
            <ul>
                @if (Model != null)
                {
                    foreach (var post in Model)
                    {
                        if (post.UserId == userId && post.IsDeleted == false)
                        {
                            <li class="post-item post_popup-item" data-description="@post.Caption">
                                <img class="post_popup-image img_post" src="data:image/jpeg;base64, @Convert.ToBase64String(post.Content)"
                                    alt="Imagen" />
                                <img src="~/img/heart-992.svg" class="heart">
                            </li>
                        }
                    }
                }
                else
                {
                    @Html.Display("No hay datos para mostrar.")
                }
            </ul>
        </div>
    </div>

    <div id="add-post-popup" class="popup">
        <div class="popup-content">
            <span class="close" id="close-popup">&times;</span>

            <!-- Formulario -->
            <div class="form-container">
                <h2>Add Post</h2>
                <form id="post-form" enctype="multipart/form-data" asp-controller="Home" asp-action="SavePost" method="post">
                    <div class="file-drop-area" id="fileDropArea">
                        <label for="post-image">Arrastra y suelta la imagen aquí o </label>
                        <span class="file-msg">Selecciona un archivo</span>
                        <input type="file" id="post-image" name="image" accept="image/*" required>
                    </div>

                    <label for="post-description">Descripción:</label>
                    <textarea id="post-description" name="description" required></textarea>

                    <button type="submit" value="Submit Form">Add Post</button>
                </form>
            </div>

            <!-- Previsualización de la imagen -->
            <div class="image-preview-container">
                <div id="image-preview"></div>
            </div>
        </div>
    </div>

    <!-- Contenedor del popup Post -->
    @* <div id="post_popupContainer" class="post_popup">
    <div class="post_popup-content">
    <span class="post_popup-close" id="post_popup-close">&times;</span>
    <div class="post_popup-image-container">
    <img id="post_popup-image" src="" alt="Imagen">
    </div>
    <div class="post_popup-text-container">
    <p id="post_popup-description"></p>
    </div>
    </div>
    </div> *@

    <script>
        const imgs = document.getElementsByClassName("img_post");
        const icons = document.getElementsByClassName("heart");

        for (let i = 0; i < imgs.length; i++) {
            imgs[i].addEventListener("dblclick", () => {
                icons[i].classList.add("like");

                setTimeout(() => {
                    icons[i].classList.remove("like");
                }, 1000);
            });
        }
    </script>
    <script>
        const darkMode = document.querySelector(".dark-mode");
        const body = document.body;

        // Función para activar o desactivar el modo oscuro
        const toggleDarkMode = () => {
            body.classList.toggle("dark-mode-variables");
            darkMode.querySelector("span:nth-child(1)").classList.toggle("active");
            darkMode.querySelector("span:nth-child(2)").classList.toggle("active");

            // Almacena el estado actual del modo oscuro en localStorage
            const isDarkModeEnabled = body.classList.contains("dark-mode-variables");
            localStorage.setItem("darkMode", isDarkModeEnabled);
        };

        // Verifica el estado almacenado en localStorage y aplica el modo oscuro si es necesario
        const applyStoredDarkMode = () => {
            const isDarkModeEnabled = localStorage.getItem("darkMode") === "true";

            if (isDarkModeEnabled) {
                toggleDarkMode();
            }
        };

        // Evento click para el botón darkMode
        darkMode.addEventListener("click", toggleDarkMode);

        // Aplicar el modo oscuro almacenado al cargar la página
        applyStoredDarkMode();

        //popup
        document.addEventListener("DOMContentLoaded", function () {
            const addPostBtn = document.getElementById("add-post-btn");
            const addPostPopup = document.getElementById("add-post-popup");
            const closePopupBtn = document.getElementById("close-popup");
            const postForm = document.getElementById("post-form");
            const postImageInput = document.getElementById("post-image");
            const imagePreview = document.getElementById("image-preview");

            addPostBtn.addEventListener("click", function (e) {
                e.preventDefault(); // Prevenir el comportamiento predeterminado del enlace
                addPostPopup.style.display = "block";
            });

            closePopupBtn.addEventListener("click", () => {
                addPostPopup.style.display = "none";
                postForm.reset();
                imagePreview.innerHTML = "";
                imagePreview.style.backgroundImage = "none";
            });

            postImageInput.addEventListener("change", function () {
                const file = postImageInput.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        imagePreview.innerHTML = `<img src="${e.target.result}" alt="Preview">`;
                    };
                    reader.readAsDataURL(file);
                }
            });

            postForm.addEventListener("submit", function (e) {
                //e.preventDefault();
                addPostPopup.style.display = "none";
                //postForm.reset();
                //imagePreview.innerHTML = "";
            });
        });

        const fileDropArea = document.getElementById("fileDropArea");
        const fileInput = document.getElementById("post-image");
        const fileMsg = document.querySelector(".file-msg");
        const imagePreview = document.getElementById("image-preview");

        fileDropArea.addEventListener("dragover", (e) => {
            e.preventDefault();
            fileDropArea.classList.add("drag-over");
        });

        fileDropArea.addEventListener("dragleave", () => {
            fileDropArea.classList.remove("drag-over");
        });

        fileDropArea.addEventListener("drop", (e) => {
            e.preventDefault();
            fileDropArea.classList.remove("drag-over");

            const droppedFiles = e.dataTransfer.files;
            if (droppedFiles.length > 0) {
                fileInput.files = droppedFiles;
                handleFile();
            }
        });

        fileInput.addEventListener("change", () => {
            handleFile();
        });

        function handleFile() {
            const file = fileInput.files[0];
            if (file) {
                const fileName = file.name;
                fileMsg.textContent = fileName;

                // Previsualización de la imagen
                const reader = new FileReader();
                reader.onload = (e) => {
                    const imageUrl = e.target.result;
                    imagePreview.innerHTML = `<img src="${imageUrl}" alt="Preview">`;
                };
                reader.readAsDataURL(file);
            } else {
                fileMsg.textContent = "Selecciona un archivo";
                imagePreview.innerHTML = ""; // Limpiar la previsualización de la imagen cuando no se selecciona ningún archivo
            }
        }

    </script>

    
</main>
